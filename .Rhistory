summarise(l.bled_out = n(), .groups = "drop") %>%
ggplot(aes(x = m, y = l.bled_out, fill = movie)) +
geom_col(position = "fill", color = "white", width = 0.7) +
theme_bw() +
theme(legend.position = "top") +
xlab("Time Intervals (% of Runtime)") +
ylab("Percentage of Bleed-Outs")
tarantino %>%
filter(profane == FALSE) %>%
count(movie) %>%
mutate(perc = n / sum(n) * 100) %>%
ggplot(aes(x = movie, y = n)) +
geom_col(fill = "white", color = "red", lwd = 0.8, width = 0.8) +
geom_text(aes(x = movie, y = n, label = paste0(n, " (", round(perc, 1), "%)"),
vjust = -0.5)) +
theme_bw() +
labs(title = "Quantitative and Percentage Comparison of Deaths for Individual Movies") +
xlab("Movie Title") +
ylab("Number of Deaths") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10), limits = c(0,75))+
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 10))
tarantino %>%
group_by(movie, profane) %>%
summarise(first = min(minutes_in)) %>%
ggplot(aes(x = movie, y = first, fill = profane)) +
geom_point(size = 3, shape = 23) +
theme_bw() +
xlab(" ") +
ylab("Duration of the Movie") +
scale_fill_discrete(labels = c("First Death", "First Profanity")) +
guides(fill = guide_legend(title = "Legend")) +
theme(axis.text.x = element_text(angle = 10))
pretty_table <- tarantino %>%
group_by(movie, profane) %>%
summarise(first = min(minutes_in), .groups = "drop") %>%
gt() %>%
tab_header(
title = "First Appearance of Profanities by Movie",
subtitle = "Grouped by Movie and Profanity Status"
) %>%
fmt_number(
columns = "first",
decimals = 2
) %>%
cols_label(
movie = "Movie Title",
profane = "Profane",
first = "First Appearance (Minutes)"
) %>%
opt_table_outline() %>%
opt_row_striping() # Adds striped rows for easier reading
# Display the pretty table
pretty_table
tarantino %>%
unite("moy", c(movie, duration), sep = "\n", remove = FALSE) %>%
group_by(moy, minutes_in, bled_out_or_cursed) %>%
summarise(n = n()) %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed, color = bled_out_or_cursed)) +
geom_col(binwidth = 1, alpha = 0.8) + # Add transparency for better layering
facet_grid(rows = vars(moy), space = "fixed", scales = "free_y") + # Allow y-axis to adjust per facet
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 10)) + # Simplified sequence
scale_fill_brewer(palette = "Set2") + # Use a colorblind-friendly palette
scale_color_brewer(palette = "Set2") +
theme_bw() +
theme(
legend.position = "top",
legend.title = element_blank(), # Remove legend title for simplicity
strip.text.y = element_text(angle = 0, face = "bold"), # Bold facet labels
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for readability
panel.grid.major = element_line(color = "gray90") # Subtle grid lines
) +
ylim(0, 10) +
coord_cartesian(clip = "off") # Prevent clipping of elements
tarantino %>%
unite("moy", c(movie, duration), sep = "\n", remove = FALSE) %>%
group_by(moy, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed, color = bled_out_or_cursed)) +
geom_col(alpha = 0.8) +
facet_grid(rows = vars(moy), space = "free", scales = "free_y", switch = "y") +
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 10)) +
scale_fill_brewer(palette = "Dark2") +
scale_color_brewer(palette = "Dark2") +
theme_bw() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.background = element_rect(fill = "lightgray", color = "black"),
strip.text.y = element_text(angle = 0, face = "bold", size = 12),
axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1),
panel.grid.major = element_line(color = "gray80", linetype = "dashed")
) +
expand_limits(y = max(tarantino$n) + 2) +
coord_cartesian(clip = "off")
tarantino %>%
unite("moy", c(movie, duration), sep = " (", remove = FALSE) %>%
mutate(moy = paste0(moy, " min)")) %>%  # Ensures movie names are readable
group_by(moy, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed, color = bled_out_or_cursed)) +
geom_col(alpha = 0.8) +
facet_grid(rows = vars(moy), space = "free", scales = "free_y", switch = "y") +
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 10)) +
scale_fill_brewer(palette = "Dark2") +
scale_color_brewer(palette = "Dark2") +
theme_bw() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.background = element_rect(fill = "lightgray", color = "black"),
strip.text.y = element_text(angle = 0, face = "bold", size = 10, hjust = 0),
axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1),
panel.grid.major = element_line(color = "gray80", linetype = "dashed")
) +
expand_limits(y = max(tarantino$n) + 2) +
coord_cartesian(clip = "off")
tarantino %>%
unite("movie_label", c(movie, duration), sep = " (", remove = FALSE) %>%
mutate(movie_label = paste0(movie_label, " min)")) %>%
group_by(movie_label, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed)) +
geom_col(position = "dodge", alpha = 0.8) +  # Bars are dodged for clarity
facet_wrap(~movie_label, ncol = 3) +  # Movies displayed in a grid horizontally
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 20)) +  # Less cluttered x-axis
scale_fill_brewer(palette = "Set2") +
theme_bw() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.text = element_text(face = "bold", size = 10),
axis.text.x = element_text(angle = 0, hjust = 0.5),  # Horizontal movie labels
panel.grid.major = element_line(color = "gray80", linetype = "dashed")
) +
coord_cartesian(clip = "off")
tarantino %>%
unite("movie_label", c(movie, duration), sep = " (", remove = FALSE) %>%
mutate(movie_label = paste0(movie_label, " min)")) %>%
group_by(movie_label, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed)) +
geom_bar(stat = "identity", width = 1, alpha = 0.8) +  # Stacked bars with better width
facet_wrap(~movie_label, ncol = 3) +  # Movies in horizontal layout
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 30)) +  # Wider gaps for readability
scale_fill_manual(values = c("#66c2a5", "#fc8d62")) +  # Custom colors for visibility
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.text = element_text(face = "bold", size = 10),
axis.text.x = element_text(angle = 45, hjust = 1),  # Angled labels for better fit
panel.grid.major = element_line(color = "gray85", linetype = "dashed")
) +
coord_cartesian(clip = "off")
tarantino %>%
unite("movie_label", c(movie, duration), sep = " (", remove = FALSE) %>%
mutate(movie_label = paste0(movie_label, " min)")) %>%
group_by(movie_label, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed)) +
geom_bar(stat = "identity", width = 1, alpha = 0.8) +  # Stacked bars with better width
facet_wrap(~movie_label, ncol = 2, scales = "free_x") +  # Movies in 2-column layout
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 20)) +  # Regular breaks on x-axis
scale_fill_manual(values = c("#66c2a5", "#fc8d62")) +  # Color-blind friendly
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.text = element_text(face = "bold", size = 10),
axis.text.x = element_text(angle = 45, hjust = 1),  # Angled labels for fit
panel.grid.major = element_line(color = "gray85", linetype = "dashed"),
panel.spacing = unit(1, "lines")  # Extra spacing between facets for clarity
) +
coord_cartesian(clip = "off")  # Prevents label clipping
tarantino %>%
unite("movie_label", c(movie, duration), sep = " (", remove = FALSE) %>%
mutate(movie_label = paste0(movie_label, " min)")) %>%
group_by(movie_label, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed)) +
geom_bar(stat = "identity", width = 1, alpha = 0.8) +  # Stacked bars with better width
facet_grid(rows = vars(movie_label), scales = "free_y", space = "fixed") +  # One x-axis
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 20)) +  # Regular x-axis labels
scale_fill_manual(values = c("#66c2a5", "#fc8d62")) +  # Color-blind friendly
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.text.y = element_text(angle = 0, face = "bold", size = 10),  # Movie names horizontal
axis.text.x = element_text(angle = 45, hjust = 1),  # Angled x-axis labels for clarity
panel.grid.major = element_line(color = "gray85", linetype = "dashed"),
panel.spacing = unit(1, "lines")  # More spacing between movies
) +
coord_cartesian(clip = "off")  # Prevents label clipping
tarantino %>%
unite("movie_label", c(movie, duration), sep = " (", remove = FALSE) %>%
mutate(movie_label = paste0(movie_label, " min)")) %>%
group_by(movie_label, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed)) +
geom_bar(stat = "identity", width = 1, alpha = 0.8) +  # Stacked bars with better width
facet_wrap(~ movie_label, ncol = 1) +  # Movies stacked with one y-axis
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 20)) +  # Regular x-axis labels
scale_y_continuous(limits = c(0, 10)) +  # Unified y-axis
scale_fill_manual(values = c("#66c2a5", "#fc8d62")) +  # Color-blind friendly
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.text = element_text(face = "bold", size = 10),  # Movie names horizontal
axis.text.x = element_text(angle = 45, hjust = 1),  # Angled x-axis labels
panel.grid.major = element_line(color = "gray85", linetype = "dashed"),
panel.spacing = unit(1, "lines")  # More spacing between movies
) +
coord_cartesian(clip = "off")  # Prevents label clipping
tarantino %>%
unite("movie_label", c(movie, duration), sep = " (", remove = FALSE) %>%
mutate(movie_label = paste0(movie_label, " min)")) %>%
group_by(movie_label, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed)) +
geom_bar(stat = "identity", width = 1, alpha = 0.8) +  # Stacked bars with better width
facet_wrap(~ movie_label, ncol = 1) +  # Movies stacked with one y-axis
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 20)) +  # Regular x-axis labels
scale_y_continuous(limits = c(0, 7)) +  # Unified y-axis
scale_fill_manual(values = c("#66c2a5", "#fc8d62")) +  # Color-blind friendly
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.text = element_text(face = "bold", size = 10),  # Movie names horizontal
axis.text.x = element_text(angle = 45, hjust = 1),  # Angled x-axis labels
panel.grid.major = element_line(color = "gray85", linetype = "dashed"),
panel.spacing = unit(1, "lines")  # More spacing between movies
) +
coord_cartesian(clip = "off")  # Prevents label clipping
tarantino %>%
unite("movie_label", c(movie, duration), sep = " (", remove = FALSE) %>%
mutate(movie_label = paste0(movie_label, " min)")) %>%
group_by(movie_label, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed)) +
geom_bar(stat = "identity", width = 1, alpha = 0.8) +  # Stacked bars with better width
facet_wrap(~ movie_label, ncol = 1) +  # Movies stacked with one y-axis
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 20)) +  # Regular x-axis labels
scale_y_continuous(limits = c(0, 6)) +  # Unified y-axis
scale_fill_manual(values = c("#66c2a5", "#fc8d62")) +  # Color-blind friendly
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.text = element_text(face = "bold", size = 10),  # Movie names horizontal
axis.text.x = element_text(angle = 45, hjust = 1),  # Angled x-axis labels
panel.grid.major = element_line(color = "gray85", linetype = "dashed"),
panel.spacing = unit(1, "lines")  # More spacing between movies
) +
coord_cartesian(clip = "off")  # Prevents label clipping
tarantino %>%
unite("movie_label", c(movie, duration), sep = " (", remove = FALSE) %>%
mutate(movie_label = paste0(movie_label, " min)")) %>%
group_by(movie_label, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed)) +
geom_bar(stat = "identity", width = 0.6, alpha = 0.8) +  # Stacked bars with better width
facet_wrap(~ movie_label, ncol = 1) +  # Movies stacked with one y-axis
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 5)) +  # Regular x-axis labels
scale_y_continuous(limits = c(0, 6)) +  # Unified y-axis
scale_fill_manual(values = c("#66c2a5", "#fc8d62")) +  # Color-blind friendly
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.text = element_text(face = "bold", size = 10),  # Movie names horizontal
axis.text.x = element_text(angle = 45, hjust = 1),  # Angled x-axis labels
panel.grid.major = element_line(color = "gray85", linetype = "dashed"),
panel.spacing = unit(1, "lines")  # More spacing between movies
) +
coord_cartesian(clip = "off")  # Prevents label clipping
tarantino %>%
unite("movie_label", c(movie, duration), sep = " (", remove = FALSE) %>%
mutate(movie_label = paste0(movie_label, " min)")) %>%
group_by(movie_label, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed)) +
geom_bar(stat = "identity", width = 0.6, alpha = 0.8) +  # Stacked bars with better width
facet_wrap(~ movie_label, ncol = 1) +  # Movies stacked with one y-axis
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 5)) +  # Regular x-axis labels
scale_y_continuous(limits = c(0, 5)) +  # Unified y-axis
scale_fill_manual(values = c("#66c2a5", "#fc8d62")) +  # Color-blind friendly
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.text = element_text(face = "bold", size = 10),  # Movie names horizontal
axis.text.x = element_text(angle = 45, hjust = 1),  # Angled x-axis labels
panel.grid.major = element_line(color = "gray85", linetype = "dashed"),
panel.spacing = unit(1, "lines")  # More spacing between movies
) +
coord_cartesian(clip = "off")  # Prevents label clipping
library(ggplot2)
library(dplyr)
library(tidyr)
tarantino %>%
unite("moy", c(movie, duration), sep = "\n", remove = FALSE) %>%
group_by(moy, minutes_in, bled_out_or_cursed) %>%
summarise(n = n(), .groups = "drop") %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed, color = bled_out_or_cursed)) +
geom_col(alpha = 0.8) +
facet_grid(rows = vars(moy), space = "free", scales = "free_y", switch = "y") +
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 10)) +
scale_fill_brewer(palette = "Dark2") +
scale_color_brewer(palette = "Dark2") +
theme_bw() +
theme(
legend.position = "top",
legend.title = element_blank(),
strip.background = element_rect(fill = "lightgray", color = "black"),
strip.text.y = element_text(angle = 0, face = "bold", size = 12),
axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1),
panel.grid.major = element_line(color = "gray80", linetype = "dashed")
) +
expand_limits(y = max(tarantino$n) + 2) +
coord_cartesian(clip = "off")
tarantino %>%
unite("moy", c(movie, duration), sep = "\n", remove = FALSE) %>%
group_by(moy, minutes_in, bled_out_or_cursed) %>%
summarise(n = n()) %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed, color = bled_out_or_cursed)) +
geom_col(binwidth = 1, alpha = 0.8) + # Add transparency for better layering
facet_grid(rows = vars(moy), space = "fixed", scales = "free_y") + # Allow y-axis to adjust per facet
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 10)) + # Simplified sequence
scale_fill_brewer(palette = "Set2") + # Use a colorblind-friendly palette
scale_color_brewer(palette = "Set2") +
theme_bw() +
theme(
legend.position = "top",
legend.title = element_blank(), # Remove legend title for simplicity
strip.text.y = element_text(angle = 0, face = "bold"), # Bold facet labels
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for readability
panel.grid.major = element_line(color = "gray90") # Subtle grid lines
) +
ylim(0, 10) +
coord_cartesian(clip = "off") # Prevent clipping of elements (initial code here)
tarantino %>%
unite("moy", c(movie, duration), sep = "\n", remove = FALSE) %>%
group_by(moy, minutes_in, bled_out_or_cursed) %>%
summarise(n = n()) %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed, color = bled_out_or_cursed)) +
geom_col(binwidth = 1, alpha = 0.8) + # Add transparency for better layering
facet_grid(rows = vars(moy), space = "fixed", scales = "free_y") + # Allow y-axis to adjust per facet
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 10)) + # Simplified sequence
scale_fill_brewer(palette = "Set2") + # Use a colorblind-friendly palette
scale_color_brewer(palette = "Set2") +
theme_bw() +
theme(
legend.position = "top",
legend.title = element_blank(), # Remove legend title for simplicity
strip.text.y = element_text(angle = 0, face = "bold"), # Bold facet labels
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for readability
panel.grid.major = element_line(color = "gray90") # Subtle grid lines
) +
ylim(0, 8) +
coord_cartesian(clip = "off") # Prevent clipping of elements (initial code here)
tarantino %>%
unite("moy", c(movie, duration), sep = "\n", remove = FALSE) %>%
group_by(moy, minutes_in, bled_out_or_cursed) %>%
summarise(n = n()) %>%
ggplot(aes(x = minutes_in, y = n, fill = bled_out_or_cursed, color = bled_out_or_cursed)) +
geom_col(binwidth = 1, alpha = 0.8) + # Add transparency for better layering
facet_grid(rows = vars(moy), space = "fixed", scales = "free_y") + # Allow y-axis to adjust per facet
ylab("Number of Profanities and Deaths") +
xlab("Minutes") +
scale_x_continuous(breaks = seq(0, 170, 10)) + # Simplified sequence
scale_fill_brewer(palette = "Set2") + # Use a colorblind-friendly palette
scale_color_brewer(palette = "Set2") +
theme_bw() +
theme(
legend.position = "top",
legend.title = element_blank(), # Remove legend title for simplicity
strip.text.y = element_text(angle = 0, face = "bold"), # Bold facet labels
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for readability
panel.grid.major = element_line(color = "gray90") # Subtle grid lines
) +
ylim(0, 10) +
coord_cartesian(clip = "off") # Prevent clipping of elements (initial code here)
prop.table(table(tarantino$movie, tarantino$bled_out_or_cursed), margin =  2)*100
# Create a contingency table with proportions (in percentage)
percentage_table <- prop.table(table(tarantino$movie, tarantino$bled_out_or_cursed), margin = 2) * 100
# Print the table with formatting
round(percentage_table, 2)
# Calculate the percentage table
percentage_table <- prop.table(table(tarantino$movie, tarantino$bled_out_or_cursed), margin = 2) * 100
# Round the table values and add a percentage sign
formatted_table <- round(percentage_table, 2) %>%
apply(2, function(x) paste0(x, "%"))
# Create a pretty table using kable
kable(formatted_table, caption = "Percentage of Bled Out or Cursed by Movie")
library(knitr)
# Calculate the percentage table
percentage_table <- prop.table(table(tarantino$movie, tarantino$bled_out_or_cursed), margin = 2) * 100
# Round the table values and add a percentage sign
formatted_table <- round(percentage_table, 2) %>%
apply(2, function(x) paste0(x, "%"))
# Create a pretty table using kable
kable(formatted_table, caption = "Percentage of Bled Out or Cursed by Movie")
library(knitr)
# Calculate the percentage table
percentage_table <- prop.table(table(tarantino$movie, tarantino$bled_out_or_cursed), margin = 2) * 100
# Round the table values and add a percentage sign
formatted_table <- round(percentage_table, 2) %>%
apply(2, function(x) paste0(x, "%"))
# Create a pretty table using kable with column separators
kable(formatted_table, caption = "Percentage of Bled Out or Cursed by Movie",
format = "pipe",
col.names = colnames(formatted_table)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
library(knitr)
# Calculate the percentage table
percentage_table <- prop.table(table(tarantino$movie, tarantino$bled_out_or_cursed), margin = 2) * 100
# Round the table values and add a percentage sign
formatted_table <- round(percentage_table, 2) %>%
apply(2, function(x) paste0(x, "%"))
# Create a pretty table using kable with column separators
kable(formatted_table, caption = "Percentage of Bled Out or Cursed by Movie",
format = "pipe",
col.names = colnames(formatted_table)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
library(knitr)
library(dplyr)
# Calculate the percentage table
percentage_table <- prop.table(table(tarantino$movie, tarantino$bled_out_or_cursed), margin = 2) * 100
# Round the table values and add a percentage sign
formatted_table <- round(percentage_table, 2) %>%
apply(2, function(x) paste0(x, "%"))
# Create a pretty table using kable with column separators
kable(formatted_table, caption = "Percentage of Bled Out or Cursed by Movie",
format = "pipe",
col.names = colnames(formatted_table)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
library(knitr)
library(dplyr)
install.packages("kableExtra")
library(kableExtra)
# Calculate the percentage table
percentage_table <- prop.table(table(tarantino$movie, tarantino$bled_out_or_cursed), margin = 2) * 100
install.packages("kableExtra")
# Round the table values and add a percentage sign
formatted_table <- round(percentage_table, 2) %>%
apply(2, function(x) paste0(x, "%"))
# Create a pretty table using kable with column separators
kable(formatted_table, caption = "Percentage of Bled Out or Cursed by Movie",
format = "pipe",
col.names = colnames(formatted_table)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
knitr::opts_chunk$set(echo = TRUE)
library(fivethirtyeight)
library(tidyverse)
library(tidyr)
library(dplyr)
library(summarytools)
library(gt)
library(knitr)
install.packages("kableExtra")
library(kableExtra)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
# Create the summarized and pivoted table
pretty_table <- tarantino %>%
group_by(movie, profane, year) %>%
summarise(death_per_min = n() / mean(duration), .groups = "drop") %>%
arrange(year) %>%
pivot_wider(names_from = profane, values_from = death_per_min)
# Format the table with kable and add styling
pretty_table %>%
kable(caption = "Death per Minute by Movie, Profanity, and Year",
digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
install.packages("kableExtra")
